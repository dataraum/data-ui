// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 String     @id @default(cuid())
  projectName        String     @unique
  projectDescription String?
  owner              User?      @relation(fields: [projectOwner], references: [id], onDelete: SetNull)
  projectOwner       String?
  workspace          Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  workspaceId        String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Files              Files[]

  @@index([projectOwner])
  @@index([workspaceId])
  @@map("project")
}

model Workspace {
  id                   String    @id @default(cuid())
  workspaceDescription String?
  owner                User?     @relation(fields: [workspaceOwner], references: [id], onDelete: SetNull)
  workspaceOwner       String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  Files                Files[]
  Project              Project[]

  @@index([workspaceOwner])
  @@map("workspace")
}

model Files {
  id          String     @id @default(cuid())
  name        String
  type        String
  description String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  owner       User?      @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  fileHash    String     @unique
  ownerId     String?
  projectId   String?
  workspaceId String?
  schema      Json       @default("{}")
  size        BigInt     @default(0)
  rowCount    Int        @default(0)
  sampledRows Json       @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([fileHash])
  @@index([ownerId])
  @@index([projectId])
  @@index([workspaceId])
  @@map("files")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Project       Project[]
  Workspace     Workspace[]
  Files         Files[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
